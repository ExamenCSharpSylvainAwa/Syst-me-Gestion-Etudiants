<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAACHUExURf///wAAAOPj47CwsEtLS/r6+s3NzXJycmxsbIyMjPX19cDAwPz8/Ovr6/Ly8u/v79fX
        17i4uIKCgsjIyN/f38/Pz1JSUkRERDAwMKqqqpubm3l5eZSUlDw8PCkpKTQ0NBEREVxcXIiIiBwcHKOj
        o1dXVxcXFw0NDSIiImJiYm9vbz8/P0dHR9gRIvAAABFcSURBVHhe7V3ZVio7EAUUReZBERUFERWP9/+/
        767ale5OKukxQaKL/XCGAN2ppOZUklbrjDPOOOOMM844IzD6o86oLxv/BvqD/fX94W3bbre3b4f76/3g
        LxE6nu0ObRuH3Wwsv/ob0V30JGkaeouu/MEvw+3uRRIl8DK/lT/6ReiY07fp7R4fLh72j72N0f71W2kc
        P2VEfM8HHePDzmD+X/bx9a8UyIe0/8sLk7oEo4dl+p0H+WH06L8mfb9xk8cYPSZfe/1l1uNO9fuzfG5m
        iS66k5/EjIRDbypNzP6Tv10+GtFgxz3uFfGnjonSuTv5QayYc38vZHsBZvyTuWyPEzyDq6oTyOiwNP6K
        Wdyjq5d1Ldz4Er/by/b4wFr0XjZXwD1+Gb1GnfAMyuZK4FmcyObIAC9l0yxg6MJdXcrmuMCGsJ6SydDB
        r6M2i8yjA9lcGYPo+RSWsCdbawCmP2KrOMIUjGRzDfg/4bhAQOhn0WBNn2RrLOhS7w5D2VwLQ+Ssmuni
        4wPj7zeFrRYCRt+HHAvPIYa/Tw95lq1x4DaMHoQwx5mbWlPX/N3KK3rMWrZGgXfKWsjG+hhSxP8uW2PA
        mHoWQs8Tm37WDb5+AhBDctg6N/tmjmlnvyZbj3g/RkGEregot+RwM6jnXU4GN7CEI+V/x2gviLlWXaVw
        CN/zi2kV/2s0vZh/Jz9at1r9VSB2Dw2agi+lcDI8L68fB1dTx7JofzS9GjxeL2FFU5CKoWTyQX49AlD/
        dspiu/C22nxfLl+/XpeX35vVm/w4wVhFKPLxpwdCwwsV4n1xzqUe7r/oz0GrdUF/1xPjn8CUunWlJmBC
        a0vvtKRdDdt3WpvCIM1brQX9PZUvODkwd1NmVpWI6o8Gj9dls3l//ThIpBSpKDVYzRMFxwJYq8NW8dH8
        aHI3uHi8mV/3Xpf3z6vn++Vr73p+83gxuBOsiLjils1FnYz5zwDmcMJ/NeUwTN6eLWp8BpHM4LabMFpD
        0I8vW33y/+LzvYnCN7YVzVNRSESNWx9RUnjTbrc/WA3O5GeVAZd00SIlfCM/OzmIwk+2Fc3jgjH9fN4i
        Lo2PQlpT+xyTbfBJQZALdz8hCuNbZ8McYuHJR4I4TxDnHJKZeMPiaFNbQYC9mJPTGp+1oDWZD2KyDzuM
        qI4+qdEN/RHf+oxaiecIqjngfROaK+RjgZeNvN0tOH+E+PxSOKSEZjmaBLyEGGeiRvVsI9trIilblO0R
        QEWDvnZMVRttZXsEUKV6C9leE/D72u1X2R4B1ODL5toIwwrHAFcK+VdScM1pfAZfragEMNRcznElm0+P
        DudJ/WwFge3Fu/+DAkMpiBfZ3gCqotZXZQVGYu9DKAilsiKz+awePr5817gJ3Vc2rf5KKyAQ9LwNQtBH
        6A+Q9PcJw0LjmjoU0ldGKH0tW08IGvKwTEVZyTfZeELQiIe10fAfZOPpAE0aVrvD+sSjTdEd/zoTHRDE
        sIPmgzOFDRAZhUfozhEGzQdYDgubHEPqrkolxw+BuuOT6raB5LdsPCHCl6IFKpILBvLaXnxy3RJ9CqFi
        8toQl4d0lOHK++cLwgFxeYjYMAFixKjCfKpLe/GrYdcxJCb9lq0nBVRfOHsBWxFWOfsCbBou2kEAHBWT
        qioKUSnUGKgcal7RcRxwKiqMOoUijSh0UkAi4yMEZ3VoCTgqY8gYcsWov7bhxeS3cIo5GNQxCv/NfPo2
        nKnzQOIJKzQk69yH5km3RXIWUfNHHBW8NuMR9fAW1DjXZRhjqJvmaTfFBVGfVjMFjU1Tp/CM/oUxOccD
        FcR8NmRTWiiPKSh0A8q+maIYk56Jzw5KoICy2Y4X+EVNZfgHgbqtRvE+MvnROWs2ULfVqPSLxuYQaoXu
        iEBqsUkVLaxh/GKYBFINmA2T7+/X/gDg2jSI7milfBvfdicXUExRexI9NzL8KMButfsKh6aZIf15IEKo
        OYkcX8rWWIFJrFkNjd/ElV4rwBA7X2upxS6Et5GjcBLwmXR1+ot1gZBZ8yODtpfU4lMu1/sdpoKc7+RY
        0ur5U85eLGMOfXVk+8+rrnwnuyyaOHsnQHroauUUcXYcb/VZPyHSjRdAlWg/Kbck1LSiJ4G5efujnESV
        vmI0OXDxh6HzKOGzhFGH4kDz6PmU1b5xDnuhr9nJpvyaK6lDLH0cE+jwk3n+R0HqJd3xhj0k0DiR8yl4
        FKsq6WnXtF6dMy8jbarJPWDvO2o+ZT3KOXmdRGevx7oOZf+H1wVi1qc4byBJJWYHrtPZPLJ0ZLRWZ1wD
        SbkR+LTZ+a4/AqQDs2yZdnA+4Sm76aHzwOfNJkiXAbpw3woE97TggyszT23Is/iSXQCx6c1382tBuVEw
        xvq03IieBiBIT3f3eaZ2HGrY+FQbK/QcKfi06dLOkcFbsowVYD4ZuP0w0i6CyLBnVfNs/GSINim1p8ew
        88AWUKxtdjnO2Le6e/PEq+2/hdrPJ+0f69P3h47PanlgjBZPdAAZwToYcsznlNGcjBbz3uv96nv59TSb
        dpMNi/9ZmQB1aH179bSIQh6nj7pVsChsTZhR04WMfjI1TOCzRWBKIWH5WOLWHhn9WU+edmXHvH0uQ5Fr
        NSy1L/ZCjNrnl2Lbm9mj8BPoT9emZK2YWLvLE2bh2bCbYcgnC2zstAWO6m1vE7ZnPK+nP0xl56KHwqUU
        7+up4i5HrnvEBnGzysCsu3GknthVnbema/Pwvo9ezm014TFczM3Jaz/x3VuqZMiRJh3pDlqGNweBKthA
        wdB4JozM83xxdAXb2ZvuVvtyn/nJ6jgEhwLEmToSHzaLKrdIO5jh1n7h8aZyMngyr0/7ni8M6VDhvaNo
        H4v7FhwUKs40QpH+IjsaEzg81Tw6tAqG07URKrTbvQdrLNUEOBwSDhl6GYwgJENyA4/FBp0HkexYrqcB
        GXY8+zKPqnxZ3zkfn2QkZAc5taHPN5+QKccoGSLp5gDDu7V5h9vbV5i7925vzOceevnPTXIS/4l2JHzN
        kAj2Xqb9k6DDoawY41nPFJSXG89weSJs3vtjIW+wLZNyxEpWHlYC62nWWKZpuiLbN5w+ijNg182Fsp8e
        mEs4zMvlO019GiMLCZbzgvk2oqQ0lVxajzEZzI2pXBcNSQG0PFh7aesVF9L6S/1sBVQc2qIFodUzjak0
        VKq97GjX0tnjVwX99Eyq511lO6viQWMpkAM+O2nKpZbZk9O8FB23XAnDxS4Voq/a09hRjuF2V0uUs2g+
        FTH2S+z1axaB1GIkd9HVPIvudqd8/5o3aLWmygl5rDk0vJEAb1QzoUIFe4uPsuIqGOlmrnbNeKmvFFTZ
        8oEJJfQN7iSkfn+itzw7vD4vdY+mV1T8hJne0LjWX0NM7lqUryjAiGfe9k3KAa/kBhwA0UulS7Jpqqch
        sRDKT/B447e2t9LTyMWQfRM7mK0Armzi+L2vuPaDIi15cg3NLT4grmQXZw/PrD7fpLJwX1UjsrqoxdYZ
        oIJH8Dt7ygJwTs3UBLxjESPxooLCSxQnSj+nIlgBVFRSrNVs9V4N4Lc9T8oMrPjMTzT9HKiHO17yX7Pl
        7YNer/dW3IgCmybFpjK65KR/s2RwHuCWXTTzMD56yTbRN/jeBXyAj6rG0AJGs9KJf2Dp+gotBZIZt9nS
        E2kS1ZYhvZMm1USv3vfUgB+qKA98saEQEiARuzSsX1GbxaaKSVutlrKDnxMm1vfFFaYG3/M60w+m3My4
        4EgCPaZCnIR/Zdmdih3MB9imfIgshqoNzM/CvCUOT820KTSp/lFPSYdrJbUyqrE5fBCvkeRI/YujxTfd
        d8sUnX5UCFRTV5mZms6lAAmYI8dsAkzqNZIqHpxQfJkGbmBZMYdJxMNfgzH0XP0F95SxKXSu30gyOabz
        hXdnThWm2RxHmJcmYZ4GDFyZncOR41WdnxwgIjSng/TkKvPHEEmYEoOJL+OwEqBy1461DcAXsbN8NYFA
        wWAE6r+espD/5+EvTV+UAS8udmzV0f2egCIxfERyavQVDdKzxj68MJe2Vbi44B99pTThVIYh+WTGfUZS
        QKwDdkiFrzylQ6mrf7LVAH1DZjsbAARoCSXwoO5Tw0/W+Nie9WbIPIkcqGtQvAHbq40lCNJ5EBRpJCMN
        6eVnMEovgVFX2fgDY5lpRnXNTgZMamZQoH1LlGAluC7yMeB3S4wGsQ+NYuqtIWWkerKMo8OCNgQ9qMBv
        gCH2thUE5Pczc0B5eDONQQbR/LxEy1cE7EV+vgbiUqxsqwJud8qXlIM34xXsF03+A55tmL4QKNlojQHI
        XVmqBTNSoP+YmhLaNuFbiH9+t+qgeKP10GQdLwwpM5HEKI5LuCCoiU4jV/HT2xgyyFvKNaw5jmt30WRa
        9YgdCzamp4Q5VhaTr14xPq6GcVbPmaIwdHAbE6K7gTulh6MidiLoRy0iBrbeWw4yqhYthSadJtgOIGky
        HMUHpUBamf9p+WimaNI/7XWNcpAGtqYeIXyeqNGbbI1G7kaBhcmFlv20/OxWCzeP8csapy/IetsFSsgV
        yEZGjq1oSiH4kCefuiKHldJG/FgkkCxuqwA3hQX2AuJgG8umFLIZp+fhcli5e5LcHBwmiXhA0l8Jbgox
        shbzAghgZKMHhRhMknlHziK7PtgjfeGmEO6SXAcCoPxsW9GcwjQUw5MlDZAJMoj5vvDVbrlZLee5AXkO
        hdBrrvABY+kwC80pTKyADAaBxFyAfJcTMkjLLT7l6CjkUIjIzOXG5+mg5hSq/D47ZdJrgHu1Vkt5joE1
        6vtdI5BLYY5NaI1Jfbu+35xCpL4OQ8zlQUYOSLc95aYvxCY/p+bIo5CMk6PwMXdum1PIErEAd9jKkozE
        e176QlU8vC3fFa+6hDGPwhx5A1fYtsKLQji6PSg3O1FIgcwhL30BkbmHJ3cLq+NaaMijECJujxqtGDnz
        CB4Usp6ExNkvxAQjP2unvvCT74R38RSpqQoohMNouYHJjdE2fCjkwy7oD1mqrzQsPtNlo7NYLBZXaF7f
        0b8XiyuYzt0V/duY7VwK1c3ZJtAXZ0GZD4VpsaIjdMiKizQl5Nw9pEOnKJdCRGtyTInxHfrHk0JVee9k
        Mi6rNRV7UkJbAG2ocimEXZD2gn5s6zuCF4VJseLBHjwcSk7QvOS0tjEf2rdzKeRlHrMp11Z4UpjcGWjJ
        vVYzrTWFotBhLwpifz8K8WB3CK3KO/WgAxTu766cuINuqkShIx+jBeQSfhSqAj2XllZ+ma6DQKFtqxWg
        7ytRCKEzbF9BTOVJIRszS7ERuFjD4N9iCtHLahRasW5BXOxLIZcNupwurrYzkkbBKLTyFfCdrBwUw5NC
        NgC2X5aYC8NRDEYhDLHmKSI/lVcl5ElhfhoGHTYtVDAK8VYtb1i4JuVLIRcrylZ3+iIchWKdsHDZ0JfC
        3GouVR2mIxyFYtLoq5scMfSnMCelDb9UBO/hKMS+iLTbUixNeFOYJDMEYA4F4eEoNJWn9BVMeFOIcjPr
        bFloN1nwGpBCgyiELDKcSuFPYVKsaMCZyweFNkMrIC6uSiEcoEQIKNZwucYMfwpVMsOEuUisAAqvb3IA
        ga5KIRTZB/+zpBzRn0JXzRqqL6xwLVRsQdAKFd3LhikCUAin0LEGbGV6Q1KoLSQilyU/zxCAQuSbTDmA
        MZQ5VLWzpBAaYxdTCDuMqG1CQWqurQhCoS10smgqwczckmvhoHNCCYXUcZy8DKXmim4UQlCId1iVe87E
        l3a0hANGcryEQggCqXBn6k1DCApxud4m6x6KF5Wia44SCtMEqeHeOBCEQrH+Ao3iWMmrhxIK2RlVjkLR
        y4JQCJOYOaEltVkVQRQ4ZDkFRGHE3HpzkYsZRmImm+uCNMg2+Q/ippX5hfqYgfsKegbGuchytn8UvSSh
        +WexTXZW/VmsWlPzsKC/hg9yRzt/GVK/nnHGGWecccYZfxP/A3iqyTVYIbBoAAAAAElFTkSuQmCC
</value>
  </data>
</root>